<div><h1>My notes</h1><h2>1 - Static site generator in <code>Python</code></h2><p>I am beginning to write a <i>static site generator</i> in <code>python</code>.
This is a <b>guided project</b> from <a href="https://www.boot.dev/">Boot.Dev</a>.</p><h6>TODO: Create source files and test files</h6><h2>2 - Creating <code>HTMLNode</code>s</h2><p>Here is what I've been working on:</p><ul><li>Setting up functionality that supports the creation of HTML as <i>strings of text</i>.</li><li>This is done by coding a representation of HTML nodes and tags as <b>abstract classes</b>.</li><li>This will be used to convert <b>markdown</b> documents to <b>HTML</b>.</li></ul><p>More stuff coming soon.</p><p><img src="../testfiles/Markdown-mark.svg.png" alt="markdown logo"></img>     to     <img src="../testfiles/image_proxy.png" alt="html5 logo"></img></p><h2>3 - Inline Markdown representation as text</h2><blockquote>Syntactic sugar
causes cancer
of the semicolon.</blockquote><ol><li>Markdown text does not need to be represented as abstract classes.</li><li>When it comes to processing inline markdown, it can simply be treated as text with a <i>text type</i>.</li><li>Examples: plain text (i.e., no inline style), bold, italic, code.</li><li>Every markdown text file starts out as just plain text.</li><li>As the text is processed, the type of text that makes up each <i>paragraph</i> is identified.</li><li>In the end, each <b>text fragment</b> with a particular <i>text type</i> corresponds to a <b>HTML tag</b> surrounding the text fragment.</li></ol><code><pre>An example of *inline* markdown using inline **styles**, inside a `code` block.</pre></code><p>becomes</p><code><pre><p>An example of <i>inline</i> markdown using inline <b>styles</b>, inside a <code>code</code> block.</p></pre></code><h2>4 - Block-level Markdown representation in HTML</h2></div>
